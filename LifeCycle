import React from 'react';
import ReactDOM from 'react-dom/client';
class Car extends React.Component {  
  constructor(props) {  
     super(props);  
     this.state = {brand: "Ford", cars: true};  
     this.changeState = this.changeState.bind(this)  
  }    
  render() {  
     return (    <div>  
            <h1>ReactJS component's Lifecycle</h1>  
            <h3>My Car is a {this.state.brand}</h3>  
            <button onClick = {this.changeState}>Click Here!</button>   
            <button onClick ={()=>this.setState({cars:this.state.cars==true?false:true})}>Click Here 4 Cars!</button>             
            {this.state.cars?<Cars/>:null}
        </div>    );  
  }  
  componentWillMount() {  console.log('Component Will MOUNT!');   }  
  componentDidMount() {   console.log('Component Did MOUNT!');  }  
  changeState(){  this.setState({brand:this.state.brand == "Ford"?"Mustang!!- Its a great Car Brand.":"Ford"});   }
 // changeState(){  this.setState({brand:this.state.brand == "Ford"?"Mustang!!- Its a great Car Brand.":"Ford"});   }  
  componentWillReceiveProps(newProps) {   console.log('Component Will Recieve Props!');  }  
  shouldComponentUpdate(newProps, newState) {   return true;    }  
  componentWillUpdate(nextProps, nextState) {  console.log('Component Will UPDATE!');  }  
  componentDidUpdate(prevProps, prevState) {  console.log('Component Did UPDATE!');  }  
  componentWillUnmount() {  console.log('Component Will UNMOUNT!');  }  
}  

class Cars extends React.Component {  
    componentWillUnmount() {  console.log('Component Cars Will UNMOUNT!');  } 
    componentWillMount() {  console.log('Component Cars Will MOUNT!');   }   
    render(){
        return <>This Cars is loaded</>
    }
}
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car/>);
